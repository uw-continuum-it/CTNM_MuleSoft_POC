<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:microsoftTeams="http://www.mulesoft.org/schema/mule/microsoftTeams" xmlns:email="http://www.mulesoft.org/schema/mule/email"
	xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking"
	xmlns:batch="http://www.mulesoft.org/schema/mule/batch" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core" xmlns:salesforce="http://www.mulesoft.org/schema/mule/salesforce" xmlns:db="http://www.mulesoft.org/schema/mule/db" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd
http://www.mulesoft.org/schema/mule/salesforce http://www.mulesoft.org/schema/mule/salesforce/current/mule-salesforce.xsd
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/batch http://www.mulesoft.org/schema/mule/batch/current/mule-batch.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/email http://www.mulesoft.org/schema/mule/email/current/mule-email.xsd
http://www.mulesoft.org/schema/mule/microsoftTeams http://www.mulesoft.org/schema/mule/microsoftTeams/current/mule-microsoftTeams.xsd">
	<salesforce:sfdc-config name="Salesforce_QA_OAuth" doc:name="Salesforce Config" doc:id="4650d8f8-e45a-4a26-b28e-99c65826c7ec" sendNullValues="true">
		<salesforce:config-with-oauth-connection >
			<salesforce:oauth-authorization-code consumerKey="3MVG9Bd71Ohl9lnNqIil7K7YFkrr_W9sdZ2rD1qBUvK4edwn_NuFCxi8cAGk6oVfQnFZN.ck5.2Q600MKE8m_" consumerSecret="7AC88C0571E467F2B06FB809592E0118C5DF06BA2D5131EE5B89883247E06E5F" authorizationUrl="https://test.salesforce.com/services/oauth2/authorize" accessTokenUrl="https://test.salesforce.com/services/oauth2/token" resourceOwnerId="ctnmcrm@uw.edu.qa"/>
			<salesforce:oauth-callback-config listenerConfig="SF_OAuth_HTTP_Listener_config" callbackPath="/oauth2callback" authorizePath="/authorize" externalCallbackUrl="http://localhost:8082/oauth2callback" />
		</salesforce:config-with-oauth-connection>
	</salesforce:sfdc-config>
	<http:listener-config name="HTTP_Listener_config" doc:name="HTTP Listener config" doc:id="942b2072-46b8-4960-836c-8e5557b9bb8f">
		<http:listener-connection host="localhost" port="8081" />
	</http:listener-config>
	<db:config name="AzureCRMDev" doc:name="Database Config" doc:id="393104f6-a973-4880-ab9d-e6dd7a9aa491" >
		<db:mssql-connection host="a1vj8ajow0.database.windows.net" user="pceuwedu" password="gakj*(5kj238098*)(0982530820j0920909)()(23jgakjkjladfkljagkKJJK)#@$%" databaseName="UWC2__CRM_DEV" />
	</db:config>
	<db:config name="DataMart" doc:name="Database Config" doc:id="379b2cd6-4942-4cd5-9457-d4912da5a234" >
		<db:mssql-connection host="datamart2019.extn.washington.edu\datamart" user="jitterbit" password="wr9qa4L5lva#h5MuZ+cr" databaseName="uweo_dev" useXaTransactions="true"/>
	</db:config>
	<http:listener-config name="SF_OAuth_HTTP_Listener_config" doc:name="HTTP Listener config" doc:id="9a3b0a87-ec5f-4caa-b10f-b4e469a45f6d" >
		<http:listener-connection host="localhost" port="8082" />
	</http:listener-config>
	<salesforce:sfdc-config name="Salesforce_Config_Basic_Auth" doc:name="Salesforce Config" doc:id="f47a0743-9fbb-4be1-b69f-29073f891754" sendNullValues="true">
		<salesforce:oauth-user-pass-connection username="jdud@uwc2.prod.qa" tokenEndpoint="https://test.salesforce.com/services/oauth2/token" password="G0cards!" consumerKey="3MVG9Bd71Ohl9lnNqIil7K7YFkrr_W9sdZ2rD1qBUvK4edwn_NuFCxi8cAGk6oVfQnFZN.ck5.2Q600MKE8m_" consumerSecret="7AC88C0571E467F2B06FB809592E0118C5DF06BA2D5131EE5B89883247E06E5F"/>
	</salesforce:sfdc-config>
	<email:smtp-config name="Email_SMTP" doc:name="Email SMTP" doc:id="33085fba-5d85-4fef-9cdb-43675f7a3d36" >
		<email:smtp-connection host="smtp.office365.com" port="587" user="jdud@uw.edu" password="Wiley2002!" />
	</email:smtp-config>
	<flow name="UpsertContactsFlow" doc:id="9a2e82d8-6405-474a-a2e5-1c0b0a25ae4c" tracking:enable-default-events="true">
		<http:listener doc:name="testHttpListener" doc:id="69649b27-5d9d-4524-a1de-946ba5ffc53a" config-ref="HTTP_Listener_config" path="testListener" />
		<set-variable value="1" doc:name="Set Variable" doc:id="210adae5-3319-42af-8701-7678f9ee4d63" variableName="daysToExtract"/>
		<db:execute-ddl doc:name="Prep Contact EOS Data" doc:id="d6fae7bf-b761-4c6e-a68a-d125e8114d0f" config-ref="DataMart">
			<db:sql ><![CDATA[DECLARE @updateInterval int = 0--[EOS_to_SF_DaysBack{1}]
DECLARE @today date = CAST(GETDATE() AS DATE)
DECLARE @tblPersonIDs TABLE (
    PersonID int
)

/****** Program Enrollments ******/
INSERT INTO @tblPersonIDs 
SELECT DISTINCT stdtPersId FROM studentProgramStatus sps1
WHERE DATEDIFF(day, updDt, @today) <= @updateInterval
/****** Course Enrollments ******/
UNION ALL
SELECT DISTINCT keyId FROM enrollDetail 
WHERE DATEDIFF(day, updDt, @today) <= @updateInterval
/****** Invoices ******/
UNION ALL 
SELECT DISTINCT keyId FROM acctRecvEmail 
WHERE DATEDIFF(day, addDt, @today) <= @updateInterval

DROP TABLE IF EXISTS [salesforce].dbo.RSTE_2233;

SELECT DISTINCT --TOP 50
     p.persId                            AS persId,
    p.lastName                            AS lastName,     
    p.firstName                            AS firstName, 
    p.preferredFirstName                AS preferredFirstName,
    p.middleName                        AS middleName, 
    d1.codeDesc                            AS namePrefix, 
    d2.codeDesc                            AS nameSuffix, 
    d3.codeDesc                            AS nameDegreeSuffix,
    d4.codeDesc                            AS addrStatus,
    a.addrLine1                            AS addrLine1,
    a.addrLine2                         AS addrLine2,
    a.city                                AS addrCity,
    a.state                                AS addrState,
    a.zip                                AS addrZip,
    d9.codeDesc                            AS addrCountry,
    d5.codeDesc                         AS homePhoneStatus,
    ph1.phoneNo                         AS homePhoneNo,
    d6.codeDesc                         AS workPhoneStatus,
    ph2.phoneNo                            AS workPhoneNo,
    d8.codeDesc                         AS faxPhoneStatus,
    ph3.phoneNo                            AS faxPhoneNo,
    d7.codeDesc                         AS emailStatus,
    em1.emailAddr                        AS emailAddr,
    em2.emailAddr                        AS uwEmailAddr,
    pc.contactName                        AS companyName,
    pc.contactTitle                        AS companyJob,
    p.birthDt                            AS birthDt,
    p.gender                            AS gender, 
	pi1.idr								AS UWstudentNo,
	pi2.idr								AS UWNetID,
    --(select idr from persIdentifier where persId = p.persId and domain = 'UWSTDT')    AS UWstudentNo,
    --(select idr from persIdentifier where persId = p.persId and domain = 'UWNETID')    AS UWNetID,
    LTRIM(ISNULL(p2.firstName + ' ' + p2.lastName,NULL)) AS persAddedByName,
    p.addDt                                AS persAddedDate,
    p.updDt                                AS persUpdDt,
    pc.updDt                            AS persContactUpdDt,
    a.updDt                                AS addressUpdDt,
    ph1.updDt                            AS homePhoneUpdDt,
    ph2.updDt                            AS workPhoneUpdDt,
    ph3.updDt                            AS faxPhoneUpdDt,
    em1.updDt                            AS emailUpdDt,
    em2.updDt                            AS uwEmailUpdDt,
    em3.emailType                        AS primaryEmailType,
	CASE 
		WHEN (SELECT COUNT(holdId) FROM hold WHERE persId = p.persId 
			AND ((effFromDt <= GETDATE() AND effThruDt >= GETDATE()) OR effThruDt IS NULL)) > 0 THEN 1 
		ELSE 0 
	END AS hasHold,
	s.PAC,
	s.PACltrPrintDt,
    --ISNULL(CAST(pm1.obsoletePersId as varchar),'') as mergeLossPersId,
    --ISNULL(CAST(pm2.survivePersId as varchar),'') as mergeWinPersId,
    CAST(pm1.obsoletePersId as varchar) as mergeLossPersId,
    CAST(pm2.survivePersId as varchar) as mergeWinPersId,
    p.persStatus
INTO [salesforce].dbo.RSTE_2233
FROM person p
LEFT JOIN @tblPersonIDs IDs
ON IDs.PersonID = p.persId
LEFT OUTER JOIN persContact pc ON pc.persId = p.persId
                               AND pc.contactType = 'COMPANY'
LEFT OUTER JOIN ddCode d1    ON (d1.codeValue = p.namePrefix 
                            AND d1.attrName = 'namePrefix')
LEFT OUTER JOIN ddCode d2    ON (d2.codeValue = p.nameSuffix 
                            AND d2.attrName = 'nameSuffix')
LEFT OUTER JOIN ddCode d3    ON (d3.codeValue = p.nameDegreeSuffix 
                            AND d3.attrName = 'nameDegreeSuffix')
LEFT OUTER JOIN address a    ON (a.persId = p.persId
                            AND a.addrType = 'M') -- mailing address 
LEFT OUTER JOIN ddCode d4    ON (d4.codeValue = a.addrStatus 
                            AND d4.attrName = 'addrStatus')
LEFT OUTER JOIN ddCode d9    ON (d9.codeValue = a.country 
                            AND d9.attrName = 'country')
LEFT OUTER JOIN phone ph1    ON (ph1.persId = p.persId
                            AND ph1.phoneType = 'HOME')
LEFT OUTER JOIN ddCode d5    ON (d5.codeValue = ph1.phoneStatus 
                            AND d5.attrName = 'phoneStatus')
LEFT OUTER JOIN phone ph2    ON (ph2.persId = p.persId
                            AND ph2.phoneType = 'WORK1')
LEFT OUTER JOIN ddCode d6    ON (d6.codeValue = ph2.phoneStatus 
                            AND d6.attrName = 'phoneStatus')
LEFT OUTER JOIN phone ph3    ON (ph3.persId = p.persId
                            AND ph3.phoneType = 'FAX')
LEFT OUTER JOIN ddCode d8    ON (d8.codeValue = ph3.phoneStatus 
                            AND d8.attrName = 'phoneStatus')
LEFT OUTER JOIN email em1    ON (em1.persId = p.persId
                            AND em1.emailType = 'CONT')
LEFT OUTER JOIN email em2    ON (em2.persId = p.persId
                            AND em2.emailType = 'UW')
LEFT OUTER JOIN email em3    ON em3.persId = p.persId and em3.primaryEmail = 1 
LEFT OUTER JOIN ddCode d7    ON (d7.codeValue = em1.emailStatus 
                            AND d7.attrName = 'emailStatus') 
LEFT OUTER JOIN person p2    ON p2.persId = p.addBy
LEFT OUTER JOIN student s	ON s.persId = p.persId 
LEFT OUTER JOIN persIdentifier pi1 ON (pi1.persId = p.persId and pi1.domain = 'UWSTDT') 
LEFT OUTER JOIN persIdentifier pi2 ON (pi2.persId = p.persId and pi2.domain = 'UWNETID')
LEFT OUTER JOIN persMerge pm1 ON p.persId = pm1.survivePersId and pm1.mergeStatus = 'C'
LEFT OUTER JOIN persMerge pm2 ON p.persId = pm2.obsoletePersId and pm2.mergeStatus = 'C'
                            
WHERE ISNULL(CAST(pm1.obsoletePersId as varchar),'') != ''
   OR ISNULL(CAST(pm2.survivePersId as varchar),'') != '']]></db:sql>
		</db:execute-ddl>
		<db:select doc:name="Select Contacts for SF Update" doc:id="520b9948-219d-4025-b6a9-6bba13c589f2" config-ref="DataMart">
			<db:sql ><![CDATA[SELECT [persId] ,[lastName] ,[firstName] ,[preferredFirstName] ,[middleName] ,[namePrefix] ,[nameSuffix] ,[nameDegreeSuffix] ,[addrStatus] ,[addrLine1] ,[addrLine2] ,[addrCity] ,[addrState] ,[addrZip] ,[addrCountry] ,[homePhoneStatus] ,[homePhoneNo] ,[workPhoneStatus] ,[workPhoneNo] ,[faxPhoneStatus] ,[faxPhoneNo] ,[emailStatus] ,[emailAddr] ,[uwEmailAddr] ,[companyName] ,[companyJob] ,[birthDt] ,[gender] ,[UWstudentNo] ,[UWNetID] ,[persAddedByName] ,[persAddedDate] ,[persUpdDt] ,[persContactUpdDt] ,[addressUpdDt] ,[homePhoneUpdDt] ,[workPhoneUpdDt] ,[faxPhoneUpdDt] ,[emailUpdDt] ,[uwEmailUpdDt] ,[primaryEmailType] ,[hasHold] ,[PAC] ,[PACltrPrintDt] ,[mergeLossPersId] ,[mergeWinPersId],[persStatus]
  FROM [salesforce].[dbo].[RSTE_2233]]]></db:sql>
		</db:select>
		<batch:job jobName="UpsertContacts_BatchJob" doc:id="88aae173-5219-462c-8c8d-c4d08a5c3c9a" blockSize="200">
			<batch:process-records >
				<batch:step name="Batch_Step" doc:id="76dfde25-01af-4964-9a14-67bddc26ac86" >
					<ee:transform doc:name="Transform Message" doc:id="aa56ec65-bbe1-49eb-b467-56c9c7893d2e">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
output application/java
---
payload]]></ee:set-payload>
			</ee:message>
		</ee:transform>
					<batch:aggregator doc:name="Batch Aggregator" doc:id="3ef65de4-a4a8-4adc-819c-733c0bd104f2" size="200">
						<ee:transform doc:name="Transform Message" doc:id="3aafb5aa-b040-41c0-96e5-3e2a2a6e18a3">
						<ee:message>
							<ee:set-payload><![CDATA[%dw 2.0
output application/java
---
payload map
{
	LastName: $.lastName,
	FirstName: $.firstName,
	EOS_ID__c: $.persId,
	persStatus__c: $.persStatus,
	survivePersId__c: $.mergeWinPersId default null,
	obsoletePersId__c: $.mergeLossPersId default null
}]]></ee:set-payload>
						</ee:message>
					</ee:transform>
						<salesforce:upsert objectType="Contact" externalIdFieldName="EOS_ID__c" doc:name="Upsert" doc:id="75761fc2-27fb-4c0f-9cc2-a137c9898461" config-ref="Salesforce_Config_Basic_Auth">
						</salesforce:upsert>
						<logger level="INFO" doc:name="Logger" doc:id="ed1f299b-42d6-4f5f-a2cd-bd958d7f1b25" />
					</batch:aggregator>
				</batch:step>
			</batch:process-records>
		</batch:job>
	</flow>
</mule>
